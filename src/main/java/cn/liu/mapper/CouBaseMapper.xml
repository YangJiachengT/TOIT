<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.liu.mapper.CouBaseMapper">
  <resultMap id="BaseResultMap" type="cn.liu.po.CouBase">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="course_code" jdbcType="INTEGER" property="courseCode" />
    <result column="class_name" jdbcType="VARCHAR" property="className" />
    <result column="teacher_id" jdbcType="CHAR" property="teacherId" />
    <result column="start_time" jdbcType="DATE" property="startTime" />
    <result column="end_time" jdbcType="DATE" property="endTime" />
    <result column="least_number" jdbcType="SMALLINT" property="leastNumber" />
    <result column="most_number" jdbcType="SMALLINT" property="mostNumber" />
    <result column="course_deadline" jdbcType="DATE" property="courseDeadline" />
    <result column="course_end_flag" jdbcType="INTEGER" property="courseEndFlag" />
    <result column="course_place" jdbcType="VARCHAR" property="coursePlace" />
    <result column="course_describe" jdbcType="VARCHAR" property="courseDescribe" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, course_code, class_name, teacher_id, start_time, end_time, least_number, most_number, 
    course_deadline, course_end_flag, course_place, course_describe
  </sql>
  <select id="selectByExample" parameterType="cn.liu.po.CouBaseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cou_base
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from cou_base
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from cou_base
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.liu.po.CouBaseExample">
    delete from cou_base
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.liu.po.CouBase">
    insert into cou_base (id, course_code, class_name, 
      teacher_id, start_time, end_time, 
      least_number, most_number, course_deadline, 
      course_end_flag, course_place, course_describe
      )
    values (#{id,jdbcType=INTEGER}, #{courseCode,jdbcType=INTEGER}, #{className,jdbcType=VARCHAR}, 
      #{teacherId,jdbcType=CHAR}, #{startTime,jdbcType=DATE}, #{endTime,jdbcType=DATE}, 
      #{leastNumber,jdbcType=SMALLINT}, #{mostNumber,jdbcType=SMALLINT}, #{courseDeadline,jdbcType=DATE}, 
      #{courseEndFlag,jdbcType=INTEGER}, #{coursePlace,jdbcType=VARCHAR}, #{courseDescribe,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.liu.po.CouBase">
    insert into cou_base
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="courseCode != null">
        course_code,
      </if>
      <if test="className != null">
        class_name,
      </if>
      <if test="teacherId != null">
        teacher_id,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="leastNumber != null">
        least_number,
      </if>
      <if test="mostNumber != null">
        most_number,
      </if>
      <if test="courseDeadline != null">
        course_deadline,
      </if>
      <if test="courseEndFlag != null">
        course_end_flag,
      </if>
      <if test="coursePlace != null">
        course_place,
      </if>
      <if test="courseDescribe != null">
        course_describe,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="courseCode != null">
        #{courseCode,jdbcType=INTEGER},
      </if>
      <if test="className != null">
        #{className,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null">
        #{teacherId,jdbcType=CHAR},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=DATE},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=DATE},
      </if>
      <if test="leastNumber != null">
        #{leastNumber,jdbcType=SMALLINT},
      </if>
      <if test="mostNumber != null">
        #{mostNumber,jdbcType=SMALLINT},
      </if>
      <if test="courseDeadline != null">
        #{courseDeadline,jdbcType=DATE},
      </if>
      <if test="courseEndFlag != null">
        #{courseEndFlag,jdbcType=INTEGER},
      </if>
      <if test="coursePlace != null">
        #{coursePlace,jdbcType=VARCHAR},
      </if>
      <if test="courseDescribe != null">
        #{courseDescribe,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.liu.po.CouBaseExample" resultType="java.lang.Long">
    select count(*) from cou_base
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update cou_base
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.courseCode != null">
        course_code = #{record.courseCode,jdbcType=INTEGER},
      </if>
      <if test="record.className != null">
        class_name = #{record.className,jdbcType=VARCHAR},
      </if>
      <if test="record.teacherId != null">
        teacher_id = #{record.teacherId,jdbcType=CHAR},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=DATE},
      </if>
      <if test="record.endTime != null">
        end_time = #{record.endTime,jdbcType=DATE},
      </if>
      <if test="record.leastNumber != null">
        least_number = #{record.leastNumber,jdbcType=SMALLINT},
      </if>
      <if test="record.mostNumber != null">
        most_number = #{record.mostNumber,jdbcType=SMALLINT},
      </if>
      <if test="record.courseDeadline != null">
        course_deadline = #{record.courseDeadline,jdbcType=DATE},
      </if>
      <if test="record.courseEndFlag != null">
        course_end_flag = #{record.courseEndFlag,jdbcType=INTEGER},
      </if>
      <if test="record.coursePlace != null">
        course_place = #{record.coursePlace,jdbcType=VARCHAR},
      </if>
      <if test="record.courseDescribe != null">
        course_describe = #{record.courseDescribe,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update cou_base
    set id = #{record.id,jdbcType=INTEGER},
      course_code = #{record.courseCode,jdbcType=INTEGER},
      class_name = #{record.className,jdbcType=VARCHAR},
      teacher_id = #{record.teacherId,jdbcType=CHAR},
      start_time = #{record.startTime,jdbcType=DATE},
      end_time = #{record.endTime,jdbcType=DATE},
      least_number = #{record.leastNumber,jdbcType=SMALLINT},
      most_number = #{record.mostNumber,jdbcType=SMALLINT},
      course_deadline = #{record.courseDeadline,jdbcType=DATE},
      course_end_flag = #{record.courseEndFlag,jdbcType=INTEGER},
      course_place = #{record.coursePlace,jdbcType=VARCHAR},
      course_describe = #{record.courseDescribe,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.liu.po.CouBase">
    update cou_base
    <set>
      <if test="courseCode != null">
        course_code = #{courseCode,jdbcType=INTEGER},
      </if>
      <if test="className != null">
        class_name = #{className,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null">
        teacher_id = #{teacherId,jdbcType=CHAR},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=DATE},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=DATE},
      </if>
      <if test="leastNumber != null">
        least_number = #{leastNumber,jdbcType=SMALLINT},
      </if>
      <if test="mostNumber != null">
        most_number = #{mostNumber,jdbcType=SMALLINT},
      </if>
      <if test="courseDeadline != null">
        course_deadline = #{courseDeadline,jdbcType=DATE},
      </if>
      <if test="courseEndFlag != null">
        course_end_flag = #{courseEndFlag,jdbcType=INTEGER},
      </if>
      <if test="coursePlace != null">
        course_place = #{coursePlace,jdbcType=VARCHAR},
      </if>
      <if test="courseDescribe != null">
        course_describe = #{courseDescribe,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.liu.po.CouBase">
    update cou_base
    set course_code = #{courseCode,jdbcType=INTEGER},
      class_name = #{className,jdbcType=VARCHAR},
      teacher_id = #{teacherId,jdbcType=CHAR},
      start_time = #{startTime,jdbcType=DATE},
      end_time = #{endTime,jdbcType=DATE},
      least_number = #{leastNumber,jdbcType=SMALLINT},
      most_number = #{mostNumber,jdbcType=SMALLINT},
      course_deadline = #{courseDeadline,jdbcType=DATE},
      course_end_flag = #{courseEndFlag,jdbcType=INTEGER},
      course_place = #{coursePlace,jdbcType=VARCHAR},
      course_describe = #{courseDescribe,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>